#FROM ubuntu:18.04 AS ubuntu
FROM continuumio/miniconda3

USER root

ARG DEBIAN_FRONTEND=noninteractive

# Add essential() packages
# Install tini
ENV TINI_VERSION v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /usr/bin/tini
RUN chmod +x /usr/bin/tini

RUN apt-get update && apt-get install -y make cmake gcc
RUN set -xeu; \
    apt update && apt install -y software-properties-common wget unzip gosu procps; \
    apt autoremove -y; \
    rm -rf /var/lib/apt/lists/*; \
    echo 'Installation of apt dependencies: OK';

# Add optional packages (May not needed for JEOBATCH)
#RUN apt-get update && apt-get install -y nano vim git iputils-ping locales mlocate
#RUN apt-get update && apt-get install -y build-essential ca-certificates libcurl4-openssl-dev libssl-dev
# To have locate work
#RUN updatedb

# Create a normal user
# We will use this one to run the script
ARG USER_NAME=amigo
ARG USER_ID=1000
ARG GROUP_ID=1000

ENV USER_NAME=${USER_NAME}
ENV USER_ID=${USER_ID}
ENV GROUP_ID=${GROUP_ID}
ENV USER_HOME=/home/${USER_NAME}

RUN set -xeu; \
    groupadd -g ${GROUP_ID} ${USER_NAME}; \
    useradd -u ${USER_ID} -g ${GROUP_ID} -m -s /bin/bash ${USER_NAME}; \
    usermod -a -G users ${USER_NAME}; \
    echo "Creating user ${USER_NAME}: OK";

# Fix conda permission errors
RUN set -xeu; \
    chown -R "${USER_ID}":"${GROUP_ID}" /opt/conda; \
    echo 'Fix conda permissions: OK'

# env to run the CONDA
#ENV PATH="/root/miniconda3/bin:${PATH}"
#ARG PATH="/root/miniconda3/bin:${PATH}"

# Initialize conda in bash config files:
#RUN conda init bash

# Create the Conda environment from the JEODESK env file
COPY ./build-jeodpp/web_jeobatch/eStation2_environment.yml /tmp/eStation2_environment.yml
RUN gosu "${USER_ID}":"${GROUP_ID}" conda env create -f /tmp/eStation2_environment.yml
#ADD ./build-jeodpp/web_jeobatch/eStation2_environment.yml /tmp/eStation2_environment.yml
#RUN conda env create -f /tmp/eStation2_environment.yml
#SHELL ["conda", "run", "-n", "eStation2", "/bin/bash", "-c"]

# Add GDAL from conda-forge -> gdal contains gdal-bin libgdal-dev (May not needed for JEOBATCH)
#RUN conda update conda
#RUN conda install conda-forge::gdal

# Add GEOS and PROJ from apt-get -> needed for mapscript (May not needed for JEOBATCH)
#RUN apt-get update && apt-get install -y libgeos-dev libproj-dev proj-bin

# SNAP Installation --> Needed for the production
#RUN wget http://step.esa.int/downloads/7.0/installers/esa-snap_all_unix_7_0.sh
#ADD esa-snap_all_unix_7_0.sh /tmp
#RUN chmod 755 -R /tmp
#RUN /tmp/esa-snap_all_unix_7_0.sh -q -dir "/usr/local"


# Initialize eStation code dir
base_tmp_dir
ARG BASE_TMP_DIR=/tmp/eStation2
ARG BASE_LOCAL_DIR=/home/venkavi/eStation2
ARG DATA_DIR=/eos/jeodpp/data/projects/GMES4AFRICA/data
ARD WWW_ROOT_DIR=/home/venkavi/PycharmProjects/estation2.MESA

ENV BASE_TMP_DIR=${BASE_TMP_DIR}
ENV BASE_LOCAL_DIR=${BASE_LOCAL_DIR}
ENV DATA_DIR=${DATA_DIR}
ENV WWW_ROOT_DIR=${WWW_ROOT_DIR}

RUN mkdir -p "${BASE_TMP_DIR}"
RUN chmod 755 -R "${BASE_TMP_DIR}"

# Configuring web folder tree ( This approach may not be possible in JEOBATCH unless we create symbolic link )
#RUN mkdir -p /var/www/estation2 && mkdir -p /var/log/apache2/

#ADD ./src /var/www/estation2
#WORKDIR /var/www/estation2

##########################################################
###### TO RUN THE SERVICE DIRECTLY IN THE CONTAINER  #####
##########################################################
# Debug entry point TOBE removed
#ENTRYPOINT ["conda", "run", "-n", "eStation2", "python", "/var/www/estation2/run.py"]
# Production entry point to start the service:
ENTRYPOINT ["conda", "run", "-n", "eStation2", "python", ${WWW_ROOT_DIR}"/apps/acquisition/drive_get_internet.py"]

# we switch to root, but we will drop privileges within the entrypoint
COPY docker-entrypoint.sh /usr/bin/docker-entrypoint.sh
USER root
ENTRYPOINT ["/usr/bin/docker-entrypoint.sh"]

# The actual script that I want to run it's default arguments
COPY jeodpp_batch_runner.py /usr/bin/jeodpp_batch_runner.py
CMD ["--help"]





